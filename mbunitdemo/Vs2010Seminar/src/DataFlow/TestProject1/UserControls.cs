// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 10.0.21006.1
//
//      Specialized classes used in a coded UI test are defined in this file.
//      Required customizations may be made in this file.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace TestProject1
{
    using Microsoft.VisualStudio.TestTools.UITesting;
    using System;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;


    public abstract class WpfControl : UITestControl
    {

        public WpfControl() :
            this(null)
        {
        }

        public WpfControl(UITestControl parent) :
            base(parent)
        {
        }

        public virtual string ClassName
        {
            get
            {
                return ((string)(this.GetProperty(UITestControlProperties.Common.ClassName)));
            }
        }

        public virtual string FriendlyName
        {
            get
            {
                return ((string)(this.GetProperty(UITestControlProperties.Common.FriendlyName)));
            }
        }

        public virtual string HelpText
        {
            get
            {
                return ((string)(this.GetProperty(UITestControlProperties.Common.HelpText)));
            }
        }

        public virtual bool HasFocus
        {
            get
            {
                return ((bool)(this.GetProperty(UITestControlProperties.Common.HasFocus)));
            }
        }

        public virtual object NativeElement
        {
            get
            {
                return ((object)(this.GetProperty(UITestControlProperties.Common.NativeElement)));
            }
        }

        public virtual string Font
        {
            get
            {
                return ((string)(this.GetProperty(WpfProperties.Common.Font)));
            }
        }

        public virtual string AcceleratorKey
        {
            get
            {
                return ((string)(this.GetProperty(WpfProperties.Common.AcceleratorKey)));
            }
        }

        public virtual string AccessKey
        {
            get
            {
                return ((string)(this.GetProperty(WpfProperties.Common.AccessKey)));
            }
        }

        public virtual string AutomationId
        {
            get
            {
                return ((string)(this.GetProperty(WpfProperties.Common.AutomationId)));
            }
        }

        public virtual string LabeledBy
        {
            get
            {
                return ((string)(this.GetProperty(WpfProperties.Common.LabeledBy)));
            }
        }
    }

    // Definition of Class WpfListItem.
    public class WpfListItem : WpfControl
    {

        public WpfListItem() :
            this(null)
        {
        }

        public WpfListItem(UITestControl parent) :
            base(parent)
        {
            TechnologyName = "UIA";
            SearchProperties.Add(WpfProperties.ListItem.ControlType, "ListItem");
        }

        public virtual bool Selected
        {
            get
            {
                return ((bool)(this.GetProperty(WpfProperties.ListItem.Selected)));
            }
        }

        public virtual string DisplayText
        {
            get
            {
                return ((string)(this.GetProperty(WpfProperties.ListItem.DisplayText)));
            }
        }
    }

    // Definition of Class WpfTitleBar.
    public class WpfTitleBar : WpfControl
    {

        public WpfTitleBar() :
            this(null)
        {
        }

        public WpfTitleBar(UITestControl parent) :
            base(parent)
        {
            TechnologyName = "UIA";
            SearchProperties.Add(WpfProperties.TitleBar.ControlType, "TitleBar");
        }

        public virtual string DisplayText
        {
            get
            {
                return ((string)(this.GetProperty(WpfProperties.TitleBar.DisplayText)));
            }
        }
    }

    public abstract class WinControl : UITestControl
    {

        public WinControl() :
            this(null)
        {
        }

        public WinControl(UITestControl parent) :
            base(parent)
        {
            SearchConfigurations.Add(SearchConfiguration.VisibleOnly);
        }

        public virtual string ClassName
        {
            get
            {
                return ((string)(this.GetProperty(UITestControlProperties.Common.ClassName)));
            }
        }

        public virtual string FriendlyName
        {
            get
            {
                return ((string)(this.GetProperty(UITestControlProperties.Common.FriendlyName)));
            }
        }

        public virtual string HelpText
        {
            get
            {
                return ((string)(this.GetProperty(UITestControlProperties.Common.HelpText)));
            }
        }

        public virtual bool HasFocus
        {
            get
            {
                return ((bool)(this.GetProperty(UITestControlProperties.Common.HasFocus)));
            }
        }

        public virtual object NativeElement
        {
            get
            {
                return ((object)(this.GetProperty(UITestControlProperties.Common.NativeElement)));
            }
        }

        public virtual string AccessKey
        {
            get
            {
                return ((string)(this.GetProperty(WinProperties.Common.AccessKey)));
            }
        }

        public virtual string ControlName
        {
            get
            {
                return ((string)(this.GetProperty(WinProperties.Common.ControlName)));
            }
        }

        public virtual int ControlId
        {
            get
            {
                return ((int)(this.GetProperty(WinProperties.Common.ControlId)));
            }
        }
    }

    // Definition of Class WinMenuItem.
    public class WinMenuItem : WinControl
    {

        public WinMenuItem() :
            this(null)
        {
        }

        public WinMenuItem(UITestControl parent) :
            base(parent)
        {
            TechnologyName = "MSAA";
            SearchProperties.Add(WinProperties.MenuItem.ControlType, "MenuItem");
            SearchConfigurations.Remove(SearchConfiguration.VisibleOnly);
        }

        public virtual bool Checked
        {
            get
            {
                return ((bool)(this.GetProperty(WinProperties.MenuItem.Checked)));
            }
            set
            {
                this.SetProperty(WinProperties.MenuItem.Checked, value);
            }
        }

        public virtual bool HasChildNodes
        {
            get
            {
                return ((bool)(this.GetProperty(WinProperties.MenuItem.HasChildNodes)));
            }
        }

        public virtual bool IsTopLevelMenu
        {
            get
            {
                return ((bool)(this.GetProperty(WinProperties.MenuItem.IsTopLevelMenu)));
            }
        }

        public virtual string DisplayText
        {
            get
            {
                return ((string)(this.GetProperty(WinProperties.MenuItem.DisplayText)));
            }
        }

        public virtual string Shortcut
        {
            get
            {
                return ((string)(this.GetProperty(WinProperties.MenuItem.Shortcut)));
            }
        }

        public virtual string AcceleratorKey
        {
            get
            {
                return ((string)(this.GetProperty(WinProperties.MenuItem.AcceleratorKey)));
            }
        }

        public virtual UITestControlCollection Items
        {
            get
            {
                return ((UITestControlCollection)(this.GetProperty(WinProperties.MenuItem.Items)));
            }
        }
    }

    // Definition of Class WpfWindow.
    public class WpfWindow : WpfControl
    {

        public WpfWindow() :
            this(null)
        {
        }

        public WpfWindow(UITestControl parent) :
            base(parent)
        {
            TechnologyName = "UIA";
            SearchProperties.Add(WpfProperties.Window.ControlType, "Window");
        }

        public virtual bool Resizable
        {
            get
            {
                return ((bool)(this.GetProperty(WpfProperties.Window.Resizable)));
            }
        }

        public virtual bool HasTitleBar
        {
            get
            {
                return ((bool)(this.GetProperty(WpfProperties.Window.HasTitleBar)));
            }
        }

        public virtual bool Popup
        {
            get
            {
                return ((bool)(this.GetProperty(WpfProperties.Window.Popup)));
            }
        }

        public virtual bool TabStop
        {
            get
            {
                return ((bool)(this.GetProperty(WpfProperties.Window.TabStop)));
            }
        }

        public virtual bool Transparent
        {
            get
            {
                return ((bool)(this.GetProperty(WpfProperties.Window.Transparent)));
            }
        }

        public virtual bool AlwaysOnTop
        {
            get
            {
                return ((bool)(this.GetProperty(WpfProperties.Window.AlwaysOnTop)));
            }
        }

        public virtual bool Maximized
        {
            get
            {
                return ((bool)(this.GetProperty(WpfProperties.Window.Maximized)));
            }
            set
            {
                this.SetProperty(WpfProperties.Window.Maximized, value);
            }
        }

        public virtual bool Minimized
        {
            get
            {
                return ((bool)(this.GetProperty(WpfProperties.Window.Minimized)));
            }
            set
            {
                this.SetProperty(WpfProperties.Window.Minimized, value);
            }
        }

        public virtual bool ShowInTaskbar
        {
            get
            {
                return ((bool)(this.GetProperty(WpfProperties.Window.ShowInTaskbar)));
            }
        }

        public virtual bool Restored
        {
            get
            {
                return ((bool)(this.GetProperty(WpfProperties.Window.Restored)));
            }
            set
            {
                this.SetProperty(WpfProperties.Window.Restored, value);
            }
        }
    }

    // Definition of Class WpfList.
    public class WpfList : WpfControl
    {

        public WpfList() :
            this(null)
        {
        }

        public WpfList(UITestControl parent) :
            base(parent)
        {
            TechnologyName = "UIA";
            SearchProperties.Add(WpfProperties.List.ControlType, "List");
        }

        public virtual bool IsMultipleSelection
        {
            get
            {
                return ((bool)(this.GetProperty(WpfProperties.List.IsMultipleSelection)));
            }
        }

        public virtual string[] SelectedItems
        {
            get
            {
                return ((string[])(this.GetProperty(WpfProperties.List.SelectedItems)));
            }
            set
            {
                this.SetProperty(WpfProperties.List.SelectedItems, value);
            }
        }

        public virtual string SelectedItemsAsString
        {
            get
            {
                return ((string)(this.GetProperty(WpfProperties.List.SelectedItemsAsString)));
            }
            set
            {
                this.SetProperty(WpfProperties.List.SelectedItemsAsString, value);
            }
        }

        public virtual UITestControlCollection Items
        {
            get
            {
                return ((UITestControlCollection)(this.GetProperty(WpfProperties.List.Items)));
            }
        }

        public virtual int[] SelectedIndices
        {
            get
            {
                return ((int[])(this.GetProperty(WpfProperties.List.SelectedIndices)));
            }
            set
            {
                this.SetProperty(WpfProperties.List.SelectedIndices, value);
            }
        }
    }

    // Definition of Class WinWindow.
    public class WinWindow : WinControl
    {

        public WinWindow() :
            this(null)
        {
        }

        public WinWindow(UITestControl parent) :
            base(parent)
        {
            TechnologyName = "MSAA";
            SearchProperties.Add(WinProperties.Window.ControlType, "Window");
        }

        public virtual bool Resizable
        {
            get
            {
                return ((bool)(this.GetProperty(WinProperties.Window.Resizable)));
            }
        }

        public virtual bool HasTitleBar
        {
            get
            {
                return ((bool)(this.GetProperty(WinProperties.Window.HasTitleBar)));
            }
        }

        public virtual bool Popup
        {
            get
            {
                return ((bool)(this.GetProperty(WinProperties.Window.Popup)));
            }
        }

        public virtual bool TabStop
        {
            get
            {
                return ((bool)(this.GetProperty(WinProperties.Window.TabStop)));
            }
        }

        public virtual bool Transparent
        {
            get
            {
                return ((bool)(this.GetProperty(WinProperties.Window.Transparent)));
            }
        }

        public virtual bool AlwaysOnTop
        {
            get
            {
                return ((bool)(this.GetProperty(WinProperties.Window.AlwaysOnTop)));
            }
        }

        public virtual bool Maximized
        {
            get
            {
                return ((bool)(this.GetProperty(WinProperties.Window.Maximized)));
            }
            set
            {
                this.SetProperty(WinProperties.Window.Maximized, value);
            }
        }

        public virtual bool Minimized
        {
            get
            {
                return ((bool)(this.GetProperty(WinProperties.Window.Minimized)));
            }
            set
            {
                this.SetProperty(WinProperties.Window.Minimized, value);
            }
        }

        public virtual bool ShowInTaskbar
        {
            get
            {
                return ((bool)(this.GetProperty(WinProperties.Window.ShowInTaskbar)));
            }
        }

        public virtual bool Restored
        {
            get
            {
                return ((bool)(this.GetProperty(WinProperties.Window.Restored)));
            }
            set
            {
                this.SetProperty(WinProperties.Window.Restored, value);
            }
        }

        public virtual int OrderOfInvocation
        {
            get
            {
                return ((int)(this.GetProperty(WinProperties.Window.OrderOfInvocation)));
            }
        }
    }

    // Definition of Class WinMenuBar.
    public class WinMenuBar : WinControl
    {

        public WinMenuBar() :
            this(null)
        {
        }

        public WinMenuBar(UITestControl parent) :
            base(parent)
        {
            TechnologyName = "MSAA";
            SearchProperties.Add(WinProperties.Menu.ControlType, "MenuBar");
        }

        public virtual UITestControlCollection Items
        {
            get
            {
                return ((UITestControlCollection)(this.GetProperty(WinProperties.Menu.Items)));
            }
        }
    }
    // Definition of Class WpfButton.
    public class WpfButton : WpfControl
    {

        public WpfButton() :
            this(null)
        {
        }

        public WpfButton(UITestControl parent) :
            base(parent)
        {
            TechnologyName = "UIA";
            SearchProperties.Add(WpfProperties.Button.ControlType, "Button");
        }

        public virtual string Shortcut
        {
            get
            {
                return ((string)(this.GetProperty(WpfProperties.Button.Shortcut)));
            }
        }

        public virtual string DisplayText
        {
            get
            {
                return ((string)(this.GetProperty(WpfProperties.Button.DisplayText)));
            }
        }
    }
    // Definition of Class WpfCalendar.
    public class WpfCalendar : WpfControl
    {

        public WpfCalendar() :
            this(null)
        {
        }

        public WpfCalendar(UITestControl parent) :
            base(parent)
        {
            TechnologyName = "UIA";
            SearchProperties.Add(UITestControlProperties.Common.ControlType, "Calendar");
        }
    }
    // Definition of Class WpfEdit.
    public class WpfEdit : WpfControl
    {

        public WpfEdit() :
            this(null)
        {
        }

        public WpfEdit(UITestControl parent) :
            base(parent)
        {
            TechnologyName = "UIA";
            SearchProperties.Add(WpfProperties.Edit.ControlType, "Edit");
        }

        public virtual string Text
        {
            get
            {
                return ((string)(this.GetProperty(WpfProperties.Edit.Text)));
            }
            set
            {
                this.SetProperty(WpfProperties.Edit.Text, value);
            }
        }

        public virtual string SelectionText
        {
            get
            {
                return ((string)(this.GetProperty(WpfProperties.Edit.SelectionText)));
            }
        }

        public virtual bool IsPassword
        {
            get
            {
                return ((bool)(this.GetProperty(WpfProperties.Edit.IsPassword)));
            }
        }

        public virtual bool ReadOnly
        {
            get
            {
                return ((bool)(this.GetProperty(WpfProperties.Edit.ReadOnly)));
            }
        }

        public virtual string CopyPastedText
        {
            get
            {
                return ((string)(this.GetProperty(WpfProperties.Edit.CopyPastedText)));
            }
            set
            {
                this.SetProperty(WpfProperties.Edit.CopyPastedText, value);
            }
        }

        public virtual string Password
        {
            set
            {
                this.SetProperty(WpfProperties.Edit.Password, value);
            }
        }
    }
    // Definition of Class WpfCustom.
    public class WpfCustom : WpfControl
    {

        public WpfCustom() :
            this(null)
        {
        }

        public WpfCustom(UITestControl parent) :
            base(parent)
        {
            TechnologyName = "UIA";
            SearchProperties.Add(UITestControlProperties.Common.ControlType, "Custom");
        }
}
}
