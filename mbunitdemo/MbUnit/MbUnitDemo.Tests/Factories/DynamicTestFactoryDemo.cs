using System.Collections.Generic;
using Gallio.Framework;
using MbUnit.Framework;
using MbUnitDemo.Tests.Extensions;

namespace MbUnitDemo.Tests.Factories
{
    [TestFixture]
    [AuthoredByNiklas]
    [Category(Categories.Factories)]
    public class DynamicTestFactoryDemo<[Factory(typeof(MyFactory), "TypeGen")] T>
        where T : IPerson, new()
    {
        // can be static, explored at runtime (not in Icarus)

        [DynamicTestFactory]
        [Row("Niklas", 35)]
        [Row("NiklasD", 36)]
        public IEnumerable<Test> CreateDynamicTestSuite(string name, int age)
        {
            yield return new TestSuite("SimpleDynamicTestSuite")
            {
                Description = "Generated By Dynamic TestFactory for T="+ typeof(T).Name,
                SetUp = () => TestLog.WriteLine("Setup"),
                TearDown = () => TestLog.WriteLine("TearDown"),
                SuiteSetUp = () => TestLog.WriteLine("SuiteSetup"),
                SuiteTearDown = () => TestLog.WriteLine("SuiteTearDown"),
                Children =
                     {
                         new TestCase("SuiteCase1", ()=>
                                {
                                    IPerson p = new T();
                                    p.Name = name;
                                    TestLog.WriteLine("Setting Name={0}", name);
                                    Assert.AreEqual(p.Name, name);
                                }),
                         new TestCase("SuiteCase2", ()=>
                                {
                                    IPerson p = new T();
                                    p.Age = age;
                                    TestLog.WriteLine("Setting age={0}", age);
                                    Assert.AreEqual(p.Age, age);
                                })
                     }
            };
        }



        [DynamicTestFactory]
        [Row(1), Row(2), Row(3), Row(4)]
        public IEnumerable<Test> CreateDynamicTests(int n)
        {
            for (int i = 0; i < n; i++)
            {
                int iStore = i;
                string testName = string.Format("DynamicSample_{0}of{1}", i + 1, n);
                yield return new TestCase(testName, () =>
                        {
                            TestLog.WriteLine("i={0}", iStore);
                            Assert.AreEqual(iStore, iStore);
                        });
            }
        }
    }
}