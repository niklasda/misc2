//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;
using System.Threading;
using InterSystems.Data.CacheClient;
using InterSystems.Data.CacheTypes;

namespace nida.model
{
    [Serializable]
    public class Child : CachePersistent
    {
        public new const string ServerClassName = "User.Child";

        static Child()
        {
            CacheConnection.AddClientTypeDescr("User.Child", typeof (Child));
        }

        public Child()
        {
        }

        public Child(CacheConnection conn)
        {
            try
            {
                Monitor.Enter(conn);
                Init(conn, ServerClassName);
            }
            finally
            {
                Monitor.Exit(conn);
            }
        }

        public virtual Nullable<long> Age
        {
            get
            {
                try
                {
                    Monitor.Enter(conn);
                    AssertIsConnected();
                    conn.GeneratedAssembly = Assembly.GetExecutingAssembly();
                    CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                    try
                    {
                        mtdSignature.SetReturnType(conn, 1);
                        GetPropertyS("Age", 2, 0, mtdSignature);
                        return ((CacheIntReturnValue) (mtdSignature.ReturnValue)).Value;
                    }
                    finally
                    {
                        mtdSignature.Clear();
                    }
                }
                finally
                {
                    Monitor.Exit(conn);
                }
            }
            set
            {
                try
                {
                    Monitor.Enter(conn);
                    AssertIsConnected();
                    conn.GeneratedAssembly = Assembly.GetExecutingAssembly();
                    CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                    try
                    {
                        mtdSignature.Add(value, conn, false);
                        SetPropertyS("Age", mtdSignature, 2, 0, 2);
                    }
                    finally
                    {
                        mtdSignature.Clear();
                    }
                }
                finally
                {
                    Monitor.Exit(conn);
                }
            }
        }

        public virtual Nullable<long> ChildId
        {
            get
            {
                try
                {
                    Monitor.Enter(conn);
                    AssertIsConnected();
                    conn.GeneratedAssembly = Assembly.GetExecutingAssembly();
                    CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                    try
                    {
                        mtdSignature.SetReturnType(conn, 1);
                        GetPropertyS("ChildId", 3, 0, mtdSignature);
                        return ((CacheIntReturnValue) (mtdSignature.ReturnValue)).Value;
                    }
                    finally
                    {
                        mtdSignature.Clear();
                    }
                }
                finally
                {
                    Monitor.Exit(conn);
                }
            }
            set
            {
                try
                {
                    Monitor.Enter(conn);
                    AssertIsConnected();
                    conn.GeneratedAssembly = Assembly.GetExecutingAssembly();
                    CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                    try
                    {
                        mtdSignature.Add(value, conn, false);
                        SetPropertyS("ChildId", mtdSignature, 3, 0, 3);
                    }
                    finally
                    {
                        mtdSignature.Clear();
                    }
                }
                finally
                {
                    Monitor.Exit(conn);
                }
            }
        }

        public virtual Parent MyParent
        {
            get
            {
                try
                {
                    Monitor.Enter(conn);
                    AssertIsConnected();
                    conn.GeneratedAssembly = Assembly.GetExecutingAssembly();
                    CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                    try
                    {
                        mtdSignature.SetReturnType(conn, 0);
                        GetPropertyS("MyParent", 5, 0, mtdSignature);
                        return ((Parent) (((CacheObjReturnValue) (mtdSignature.ReturnValue)).Value));
                    }
                    finally
                    {
                        mtdSignature.Clear();
                    }
                }
                finally
                {
                    Monitor.Exit(conn);
                }
            }
            set
            {
                try
                {
                    Monitor.Enter(conn);
                    AssertIsConnected();
                    conn.GeneratedAssembly = Assembly.GetExecutingAssembly();
                    CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                    try
                    {
                        mtdSignature.Add(value, conn, false);
                        SetPropertyS("MyParent", mtdSignature, 5, 0, 4);
                    }
                    finally
                    {
                        mtdSignature.Clear();
                    }
                }
                finally
                {
                    Monitor.Exit(conn);
                }
            }
        }

        public virtual string Name
        {
            get
            {
                try
                {
                    Monitor.Enter(conn);
                    AssertIsConnected();
                    conn.GeneratedAssembly = Assembly.GetExecutingAssembly();
                    CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                    try
                    {
                        mtdSignature.SetReturnType(conn, 4);
                        GetPropertyS("Name", 6, 0, mtdSignature);
                        return ((CacheStringReturnValue) (mtdSignature.ReturnValue)).Value;
                    }
                    finally
                    {
                        mtdSignature.Clear();
                    }
                }
                finally
                {
                    Monitor.Exit(conn);
                }
            }
            set
            {
                try
                {
                    Monitor.Enter(conn);
                    AssertIsConnected();
                    conn.GeneratedAssembly = Assembly.GetExecutingAssembly();
                    CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                    try
                    {
                        mtdSignature.Add(value, conn, false);
                        SetPropertyS("Name", mtdSignature, 6, 0, 6);
                    }
                    finally
                    {
                        mtdSignature.Clear();
                    }
                }
                finally
                {
                    Monitor.Exit(conn);
                }
            }
        }

        public virtual Nullable<long> ParentId
        {
            get
            {
                try
                {
                    Monitor.Enter(conn);
                    AssertIsConnected();
                    conn.GeneratedAssembly = Assembly.GetExecutingAssembly();
                    CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                    try
                    {
                        mtdSignature.SetReturnType(conn, 1);
                        GetPropertyS("ParentId", 7, 0, mtdSignature);
                        return ((CacheIntReturnValue) (mtdSignature.ReturnValue)).Value;
                    }
                    finally
                    {
                        mtdSignature.Clear();
                    }
                }
                finally
                {
                    Monitor.Exit(conn);
                }
            }
            set
            {
                try
                {
                    Monitor.Enter(conn);
                    AssertIsConnected();
                    conn.GeneratedAssembly = Assembly.GetExecutingAssembly();
                    CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                    try
                    {
                        mtdSignature.Add(value, conn, false);
                        SetPropertyS("ParentId", mtdSignature, 7, 0, 7);
                    }
                    finally
                    {
                        mtdSignature.Clear();
                    }
                }
                finally
                {
                    Monitor.Exit(conn);
                }
            }
        }

        public static Child Open(CacheConnection conn, byte[] id, int concurrency, out CacheStatus status)
        {
            try
            {
                Monitor.Enter(conn);
                conn.GeneratedAssembly = Assembly.GetExecutingAssembly();
                return ((Child) (conn.OpenProxyObj(ServerClassName, id, concurrency, out status)));
            }
            finally
            {
                Monitor.Exit(conn);
            }
        }

        public static Child Open(CacheConnection conn, byte[] id, out CacheStatus status)
        {
            try
            {
                Monitor.Enter(conn);
                conn.GeneratedAssembly = Assembly.GetExecutingAssembly();
                return ((Child) (conn.OpenProxyObj(ServerClassName, id, out status)));
            }
            finally
            {
                Monitor.Exit(conn);
            }
        }

        public static Child Open(CacheConnection conn, byte[] id)
        {
            try
            {
                Monitor.Enter(conn);
                conn.GeneratedAssembly = Assembly.GetExecutingAssembly();
                return ((Child) (conn.OpenProxyObj(ServerClassName, id)));
            }
            finally
            {
                Monitor.Exit(conn);
            }
        }

        public static Child Open(CacheConnection conn, byte[] id, int concurrency, int timeout, out CacheStatus status)
        {
            try
            {
                Monitor.Enter(conn);
                conn.GeneratedAssembly = Assembly.GetExecutingAssembly();
                return ((Child) (conn.OpenProxyObj(ServerClassName, id, concurrency, timeout, out status)));
            }
            finally
            {
                Monitor.Exit(conn);
            }
        }

        public static Child OpenId(CacheConnection conn, string id, int concurrency, out CacheStatus status)
        {
            try
            {
                Monitor.Enter(conn);
                conn.GeneratedAssembly = Assembly.GetExecutingAssembly();
                return ((Child) (conn.OpenProxyObj(ServerClassName, id, concurrency, out status)));
            }
            finally
            {
                Monitor.Exit(conn);
            }
        }

        public static Child OpenId(CacheConnection conn, string id, out CacheStatus status)
        {
            try
            {
                Monitor.Enter(conn);
                conn.GeneratedAssembly = Assembly.GetExecutingAssembly();
                return ((Child) (conn.OpenProxyObj(ServerClassName, id, out status)));
            }
            finally
            {
                Monitor.Exit(conn);
            }
        }

        public static Child OpenId(CacheConnection conn, string id)
        {
            try
            {
                Monitor.Enter(conn);
                conn.GeneratedAssembly = Assembly.GetExecutingAssembly();
                return ((Child) (conn.OpenProxyObj(ServerClassName, id)));
            }
            finally
            {
                Monitor.Exit(conn);
            }
        }

        public static Child OpenId(CacheConnection conn, string id, int concurrency, int timeout, out CacheStatus status)
        {
            try
            {
                Monitor.Enter(conn);
                conn.GeneratedAssembly = Assembly.GetExecutingAssembly();
                return ((Child) (conn.OpenProxyObj(ServerClassName, id, concurrency, timeout, out status)));
            }
            finally
            {
                Monitor.Exit(conn);
            }
        }

        public static Nullable<bool> ExistsId(CacheConnection conn, string id)
        {
            return ExistsIdInternal(conn, ServerClassName, id);
        }

        public static CacheStatus DeleteId(CacheConnection conn, string id)
        {
            return DeleteIdInternal(conn, ServerClassName, id);
        }

        public static CacheStatus KillExtent(CacheConnection conn)
        {
            return KillExtentInternal(conn, ServerClassName);
        }

        public static Nullable<bool> ChildIdIndexCheck(CacheConnection conn, Nullable<long> K1)
        {
            try
            {
                Monitor.Enter(conn);
                conn.GeneratedAssembly = Assembly.GetExecutingAssembly();
                CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try
                {
                    mtdSignature.SetReturnType(conn, 9);
                    mtdSignature.Add(K1, conn, false);
                    RunClassMethodS(conn, ServerClassName, "ChildIdIndexCheck", mtdSignature);
                    return ((CacheBooleanReturnValue) (mtdSignature.ReturnValue)).Value;
                }
                finally
                {
                    mtdSignature.Clear();
                }
            }
            finally
            {
                Monitor.Exit(conn);
            }
        }

        public static Nullable<bool> ChildIdIndexCheck(CacheConnection conn, Nullable<long> K1, Nullable<long> lockonly)
        {
            try
            {
                Monitor.Enter(conn);
                conn.GeneratedAssembly = Assembly.GetExecutingAssembly();
                CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try
                {
                    mtdSignature.SetReturnType(conn, 9);
                    mtdSignature.Add(K1, conn, false);
                    mtdSignature.Add(lockonly, conn, false);
                    RunClassMethodS(conn, ServerClassName, "ChildIdIndexCheck", mtdSignature);
                    return ((CacheBooleanReturnValue) (mtdSignature.ReturnValue)).Value;
                }
                finally
                {
                    mtdSignature.Clear();
                }
            }
            finally
            {
                Monitor.Exit(conn);
            }
        }

        public static CacheStatus ChildIdIndexDelete(CacheConnection conn, Nullable<long> K1)
        {
            try
            {
                Monitor.Enter(conn);
                conn.GeneratedAssembly = Assembly.GetExecutingAssembly();
                CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try
                {
                    mtdSignature.SetReturnType(conn, 5);
                    mtdSignature.Add(K1, conn, false);
                    RunClassMethodS(conn, ServerClassName, "ChildIdIndexDelete", mtdSignature);
                    return ((CacheStatusReturnValue) (mtdSignature.ReturnValue)).Value;
                }
                finally
                {
                    mtdSignature.Clear();
                }
            }
            finally
            {
                Monitor.Exit(conn);
            }
        }

        public static CacheStatus ChildIdIndexDelete(CacheConnection conn, Nullable<long> K1, Nullable<long> concurrency)
        {
            try
            {
                Monitor.Enter(conn);
                conn.GeneratedAssembly = Assembly.GetExecutingAssembly();
                CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try
                {
                    mtdSignature.SetReturnType(conn, 5);
                    mtdSignature.Add(K1, conn, false);
                    mtdSignature.Add(concurrency, conn, false);
                    RunClassMethodS(conn, ServerClassName, "ChildIdIndexDelete", mtdSignature);
                    return ((CacheStatusReturnValue) (mtdSignature.ReturnValue)).Value;
                }
                finally
                {
                    mtdSignature.Clear();
                }
            }
            finally
            {
                Monitor.Exit(conn);
            }
        }

        public static Nullable<bool> ChildIdIndexExists(CacheConnection conn, Nullable<long> K1)
        {
            try
            {
                Monitor.Enter(conn);
                conn.GeneratedAssembly = Assembly.GetExecutingAssembly();
                CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try
                {
                    mtdSignature.SetReturnType(conn, 9);
                    mtdSignature.Add(K1, conn, false);
                    RunClassMethodS(conn, ServerClassName, "ChildIdIndexExists", mtdSignature);
                    return ((CacheBooleanReturnValue) (mtdSignature.ReturnValue)).Value;
                }
                finally
                {
                    mtdSignature.Clear();
                }
            }
            finally
            {
                Monitor.Exit(conn);
            }
        }

        public static Nullable<bool> ChildIdIndexExists(CacheConnection conn, Nullable<long> K1, ref string id)
        {
            try
            {
                Monitor.Enter(conn);
                conn.GeneratedAssembly = Assembly.GetExecutingAssembly();
                CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try
                {
                    mtdSignature.SetReturnType(conn, 9);
                    mtdSignature.Add(K1, conn, false);
                    mtdSignature.Add(id, conn, true);
                    RunClassMethodS(conn, ServerClassName, "ChildIdIndexExists", mtdSignature);
                    id = ((CacheStringArgument) (mtdSignature.Arguments[1])).Value;
                    return ((CacheBooleanReturnValue) (mtdSignature.ReturnValue)).Value;
                }
                finally
                {
                    mtdSignature.Clear();
                }
            }
            finally
            {
                Monitor.Exit(conn);
            }
        }

        public static CacheObject ChildIdIndexOpen(CacheConnection conn, Nullable<long> K1)
        {
            try
            {
                Monitor.Enter(conn);
                conn.GeneratedAssembly = Assembly.GetExecutingAssembly();
                CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try
                {
                    mtdSignature.SetReturnType(conn, 0);
                    mtdSignature.Add(K1, conn, false);
                    RunClassMethodS(conn, ServerClassName, "ChildIdIndexOpen", mtdSignature);
                    return ((CacheObject) (((CacheObjReturnValue) (mtdSignature.ReturnValue)).Value));
                }
                finally
                {
                    mtdSignature.Clear();
                }
            }
            finally
            {
                Monitor.Exit(conn);
            }
        }

        public static CacheObject ChildIdIndexOpen(CacheConnection conn, Nullable<long> K1, Nullable<long> concurrency)
        {
            try
            {
                Monitor.Enter(conn);
                conn.GeneratedAssembly = Assembly.GetExecutingAssembly();
                CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try
                {
                    mtdSignature.SetReturnType(conn, 0);
                    mtdSignature.Add(K1, conn, false);
                    mtdSignature.Add(concurrency, conn, false);
                    RunClassMethodS(conn, ServerClassName, "ChildIdIndexOpen", mtdSignature);
                    return ((CacheObject) (((CacheObjReturnValue) (mtdSignature.ReturnValue)).Value));
                }
                finally
                {
                    mtdSignature.Clear();
                }
            }
            finally
            {
                Monitor.Exit(conn);
            }
        }

        public static CacheObject ChildIdIndexOpen(CacheConnection conn, Nullable<long> K1, Nullable<long> concurrency,
                                                   ref CacheStatus sc)
        {
            try
            {
                Monitor.Enter(conn);
                conn.GeneratedAssembly = Assembly.GetExecutingAssembly();
                CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try
                {
                    mtdSignature.SetReturnType(conn, 0);
                    mtdSignature.Add(K1, conn, false);
                    mtdSignature.Add(concurrency, conn, false);
                    mtdSignature.Add(sc, conn, true);
                    RunClassMethodS(conn, ServerClassName, "ChildIdIndexOpen", mtdSignature);
                    sc = ((CacheStatusArgument) (mtdSignature.Arguments[2])).Value;
                    return ((CacheObject) (((CacheObjReturnValue) (mtdSignature.ReturnValue)).Value));
                }
                finally
                {
                    mtdSignature.Clear();
                }
            }
            finally
            {
                Monitor.Exit(conn);
            }
        }

        public static Nullable<bool> IDKEYCheck(CacheConnection conn, string K1, string K2)
        {
            try
            {
                Monitor.Enter(conn);
                conn.GeneratedAssembly = Assembly.GetExecutingAssembly();
                CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try
                {
                    mtdSignature.SetReturnType(conn, 9);
                    mtdSignature.Add(K1, conn, false);
                    mtdSignature.Add(K2, conn, false);
                    RunClassMethodS(conn, ServerClassName, "IDKEYCheck", mtdSignature);
                    return ((CacheBooleanReturnValue) (mtdSignature.ReturnValue)).Value;
                }
                finally
                {
                    mtdSignature.Clear();
                }
            }
            finally
            {
                Monitor.Exit(conn);
            }
        }

        public static Nullable<bool> IDKEYCheck(CacheConnection conn, string K1, string K2, Nullable<long> lockonly)
        {
            try
            {
                Monitor.Enter(conn);
                conn.GeneratedAssembly = Assembly.GetExecutingAssembly();
                CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try
                {
                    mtdSignature.SetReturnType(conn, 9);
                    mtdSignature.Add(K1, conn, false);
                    mtdSignature.Add(K2, conn, false);
                    mtdSignature.Add(lockonly, conn, false);
                    RunClassMethodS(conn, ServerClassName, "IDKEYCheck", mtdSignature);
                    return ((CacheBooleanReturnValue) (mtdSignature.ReturnValue)).Value;
                }
                finally
                {
                    mtdSignature.Clear();
                }
            }
            finally
            {
                Monitor.Exit(conn);
            }
        }

        public static CacheStatus IDKEYDelete(CacheConnection conn, string K1, string K2)
        {
            try
            {
                Monitor.Enter(conn);
                conn.GeneratedAssembly = Assembly.GetExecutingAssembly();
                CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try
                {
                    mtdSignature.SetReturnType(conn, 5);
                    mtdSignature.Add(K1, conn, false);
                    mtdSignature.Add(K2, conn, false);
                    RunClassMethodS(conn, ServerClassName, "IDKEYDelete", mtdSignature);
                    return ((CacheStatusReturnValue) (mtdSignature.ReturnValue)).Value;
                }
                finally
                {
                    mtdSignature.Clear();
                }
            }
            finally
            {
                Monitor.Exit(conn);
            }
        }

        public static CacheStatus IDKEYDelete(CacheConnection conn, string K1, string K2, Nullable<long> concurrency)
        {
            try
            {
                Monitor.Enter(conn);
                conn.GeneratedAssembly = Assembly.GetExecutingAssembly();
                CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try
                {
                    mtdSignature.SetReturnType(conn, 5);
                    mtdSignature.Add(K1, conn, false);
                    mtdSignature.Add(K2, conn, false);
                    mtdSignature.Add(concurrency, conn, false);
                    RunClassMethodS(conn, ServerClassName, "IDKEYDelete", mtdSignature);
                    return ((CacheStatusReturnValue) (mtdSignature.ReturnValue)).Value;
                }
                finally
                {
                    mtdSignature.Clear();
                }
            }
            finally
            {
                Monitor.Exit(conn);
            }
        }

        public static Nullable<bool> IDKEYExists(CacheConnection conn, string K1, string K2)
        {
            try
            {
                Monitor.Enter(conn);
                conn.GeneratedAssembly = Assembly.GetExecutingAssembly();
                CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try
                {
                    mtdSignature.SetReturnType(conn, 9);
                    mtdSignature.Add(K1, conn, false);
                    mtdSignature.Add(K2, conn, false);
                    RunClassMethodS(conn, ServerClassName, "IDKEYExists", mtdSignature);
                    return ((CacheBooleanReturnValue) (mtdSignature.ReturnValue)).Value;
                }
                finally
                {
                    mtdSignature.Clear();
                }
            }
            finally
            {
                Monitor.Exit(conn);
            }
        }

        public static Nullable<bool> IDKEYExists(CacheConnection conn, string K1, string K2, ref string id)
        {
            try
            {
                Monitor.Enter(conn);
                conn.GeneratedAssembly = Assembly.GetExecutingAssembly();
                CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try
                {
                    mtdSignature.SetReturnType(conn, 9);
                    mtdSignature.Add(K1, conn, false);
                    mtdSignature.Add(K2, conn, false);
                    mtdSignature.Add(id, conn, true);
                    RunClassMethodS(conn, ServerClassName, "IDKEYExists", mtdSignature);
                    id = ((CacheStringArgument) (mtdSignature.Arguments[2])).Value;
                    return ((CacheBooleanReturnValue) (mtdSignature.ReturnValue)).Value;
                }
                finally
                {
                    mtdSignature.Clear();
                }
            }
            finally
            {
                Monitor.Exit(conn);
            }
        }

        public static CacheObject IDKEYOpen(CacheConnection conn, string K1, string K2)
        {
            try
            {
                Monitor.Enter(conn);
                conn.GeneratedAssembly = Assembly.GetExecutingAssembly();
                CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try
                {
                    mtdSignature.SetReturnType(conn, 0);
                    mtdSignature.Add(K1, conn, false);
                    mtdSignature.Add(K2, conn, false);
                    RunClassMethodS(conn, ServerClassName, "IDKEYOpen", mtdSignature);
                    return ((CacheObject) (((CacheObjReturnValue) (mtdSignature.ReturnValue)).Value));
                }
                finally
                {
                    mtdSignature.Clear();
                }
            }
            finally
            {
                Monitor.Exit(conn);
            }
        }

        public static CacheObject IDKEYOpen(CacheConnection conn, string K1, string K2, Nullable<long> concurrency)
        {
            try
            {
                Monitor.Enter(conn);
                conn.GeneratedAssembly = Assembly.GetExecutingAssembly();
                CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try
                {
                    mtdSignature.SetReturnType(conn, 0);
                    mtdSignature.Add(K1, conn, false);
                    mtdSignature.Add(K2, conn, false);
                    mtdSignature.Add(concurrency, conn, false);
                    RunClassMethodS(conn, ServerClassName, "IDKEYOpen", mtdSignature);
                    return ((CacheObject) (((CacheObjReturnValue) (mtdSignature.ReturnValue)).Value));
                }
                finally
                {
                    mtdSignature.Clear();
                }
            }
            finally
            {
                Monitor.Exit(conn);
            }
        }

        public static CacheObject IDKEYOpen(CacheConnection conn, string K1, string K2, Nullable<long> concurrency,
                                            ref CacheStatus sc)
        {
            try
            {
                Monitor.Enter(conn);
                conn.GeneratedAssembly = Assembly.GetExecutingAssembly();
                CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try
                {
                    mtdSignature.SetReturnType(conn, 0);
                    mtdSignature.Add(K1, conn, false);
                    mtdSignature.Add(K2, conn, false);
                    mtdSignature.Add(concurrency, conn, false);
                    mtdSignature.Add(sc, conn, true);
                    RunClassMethodS(conn, ServerClassName, "IDKEYOpen", mtdSignature);
                    sc = ((CacheStatusArgument) (mtdSignature.Arguments[3])).Value;
                    return ((CacheObject) (((CacheObjReturnValue) (mtdSignature.ReturnValue)).Value));
                }
                finally
                {
                    mtdSignature.Clear();
                }
            }
            finally
            {
                Monitor.Exit(conn);
            }
        }

        public virtual string MyParentGetObjectId()
        {
            try
            {
                Monitor.Enter(conn);
                AssertIsConnected();
                conn.GeneratedAssembly = Assembly.GetExecutingAssembly();
                CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try
                {
                    mtdSignature.SetReturnType(conn, 4);
                    RunMethodS("MyParentGetObjectId", mtdSignature);
                    return ((CacheStringReturnValue) (mtdSignature.ReturnValue)).Value;
                }
                finally
                {
                    mtdSignature.Clear();
                }
            }
            finally
            {
                Monitor.Exit(conn);
            }
        }

        public virtual string MyParentGetObjectId(Nullable<long> force)
        {
            try
            {
                Monitor.Enter(conn);
                AssertIsConnected();
                conn.GeneratedAssembly = Assembly.GetExecutingAssembly();
                CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try
                {
                    mtdSignature.SetReturnType(conn, 4);
                    mtdSignature.Add(force, conn, false);
                    RunMethodS("MyParentGetObjectId", mtdSignature);
                    return ((CacheStringReturnValue) (mtdSignature.ReturnValue)).Value;
                }
                finally
                {
                    mtdSignature.Clear();
                }
            }
            finally
            {
                Monitor.Exit(conn);
            }
        }

        public virtual CacheStatus MyParentSetObject(byte[] newvalue)
        {
            try
            {
                Monitor.Enter(conn);
                AssertIsConnected();
                conn.GeneratedAssembly = Assembly.GetExecutingAssembly();
                CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try
                {
                    mtdSignature.SetReturnType(conn, 5);
                    mtdSignature.Add(newvalue, conn, false);
                    RunMethodS("MyParentSetObject", mtdSignature);
                    return ((CacheStatusReturnValue) (mtdSignature.ReturnValue)).Value;
                }
                finally
                {
                    mtdSignature.Clear();
                }
            }
            finally
            {
                Monitor.Exit(conn);
            }
        }

        public virtual CacheStatus MyParentSetObjectId(string newid)
        {
            try
            {
                Monitor.Enter(conn);
                AssertIsConnected();
                conn.GeneratedAssembly = Assembly.GetExecutingAssembly();
                CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try
                {
                    mtdSignature.SetReturnType(conn, 5);
                    mtdSignature.Add(newid, conn, false);
                    RunMethodS("MyParentSetObjectId", mtdSignature);
                    return ((CacheStatusReturnValue) (mtdSignature.ReturnValue)).Value;
                }
                finally
                {
                    mtdSignature.Clear();
                }
            }
            finally
            {
                Monitor.Exit(conn);
            }
        }

        public virtual CacheStatus OnPopulate()
        {
            try
            {
                Monitor.Enter(conn);
                AssertIsConnected();
                conn.GeneratedAssembly = Assembly.GetExecutingAssembly();
                CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try
                {
                    mtdSignature.SetReturnType(conn, 5);
                    RunMethodS("OnPopulate", mtdSignature);
                    return ((CacheStatusReturnValue) (mtdSignature.ReturnValue)).Value;
                }
                finally
                {
                    mtdSignature.Clear();
                }
            }
            finally
            {
                Monitor.Exit(conn);
            }
        }

        public static Nullable<long> Populate(CacheConnection conn)
        {
            try
            {
                Monitor.Enter(conn);
                conn.GeneratedAssembly = Assembly.GetExecutingAssembly();
                CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try
                {
                    mtdSignature.SetReturnType(conn, 1);
                    RunClassMethodS(conn, ServerClassName, "Populate", mtdSignature);
                    return ((CacheIntReturnValue) (mtdSignature.ReturnValue)).Value;
                }
                finally
                {
                    mtdSignature.Clear();
                }
            }
            finally
            {
                Monitor.Exit(conn);
            }
        }

        public static Nullable<long> Populate(CacheConnection conn, Nullable<long> count)
        {
            try
            {
                Monitor.Enter(conn);
                conn.GeneratedAssembly = Assembly.GetExecutingAssembly();
                CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try
                {
                    mtdSignature.SetReturnType(conn, 1);
                    mtdSignature.Add(count, conn, false);
                    RunClassMethodS(conn, ServerClassName, "Populate", mtdSignature);
                    return ((CacheIntReturnValue) (mtdSignature.ReturnValue)).Value;
                }
                finally
                {
                    mtdSignature.Clear();
                }
            }
            finally
            {
                Monitor.Exit(conn);
            }
        }

        public static Nullable<long> Populate(CacheConnection conn, Nullable<long> count, Nullable<long> verbose)
        {
            try
            {
                Monitor.Enter(conn);
                conn.GeneratedAssembly = Assembly.GetExecutingAssembly();
                CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try
                {
                    mtdSignature.SetReturnType(conn, 1);
                    mtdSignature.Add(count, conn, false);
                    mtdSignature.Add(verbose, conn, false);
                    RunClassMethodS(conn, ServerClassName, "Populate", mtdSignature);
                    return ((CacheIntReturnValue) (mtdSignature.ReturnValue)).Value;
                }
                finally
                {
                    mtdSignature.Clear();
                }
            }
            finally
            {
                Monitor.Exit(conn);
            }
        }

        public static Nullable<long> Populate(CacheConnection conn, Nullable<long> count, Nullable<long> verbose,
                                              Nullable<long> DeferIndices)
        {
            try
            {
                Monitor.Enter(conn);
                conn.GeneratedAssembly = Assembly.GetExecutingAssembly();
                CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try
                {
                    mtdSignature.SetReturnType(conn, 1);
                    mtdSignature.Add(count, conn, false);
                    mtdSignature.Add(verbose, conn, false);
                    mtdSignature.Add(DeferIndices, conn, false);
                    RunClassMethodS(conn, ServerClassName, "Populate", mtdSignature);
                    return ((CacheIntReturnValue) (mtdSignature.ReturnValue)).Value;
                }
                finally
                {
                    mtdSignature.Clear();
                }
            }
            finally
            {
                Monitor.Exit(conn);
            }
        }

        public static Nullable<long> Populate(CacheConnection conn, Nullable<long> count, Nullable<long> verbose,
                                              Nullable<long> DeferIndices, ref Nullable<long> objects)
        {
            try
            {
                Monitor.Enter(conn);
                conn.GeneratedAssembly = Assembly.GetExecutingAssembly();
                CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try
                {
                    mtdSignature.SetReturnType(conn, 1);
                    mtdSignature.Add(count, conn, false);
                    mtdSignature.Add(verbose, conn, false);
                    mtdSignature.Add(DeferIndices, conn, false);
                    mtdSignature.Add(objects, conn, true);
                    RunClassMethodS(conn, ServerClassName, "Populate", mtdSignature);
                    objects = ((CacheIntArgument) (mtdSignature.Arguments[3])).Value;
                    return ((CacheIntReturnValue) (mtdSignature.ReturnValue)).Value;
                }
                finally
                {
                    mtdSignature.Clear();
                }
            }
            finally
            {
                Monitor.Exit(conn);
            }
        }

        public static Nullable<long> Populate(CacheConnection conn, Nullable<long> count, Nullable<long> verbose,
                                              Nullable<long> DeferIndices, ref Nullable<long> objects,
                                              Nullable<long> tune)
        {
            try
            {
                Monitor.Enter(conn);
                conn.GeneratedAssembly = Assembly.GetExecutingAssembly();
                CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try
                {
                    mtdSignature.SetReturnType(conn, 1);
                    mtdSignature.Add(count, conn, false);
                    mtdSignature.Add(verbose, conn, false);
                    mtdSignature.Add(DeferIndices, conn, false);
                    mtdSignature.Add(objects, conn, true);
                    mtdSignature.Add(tune, conn, false);
                    RunClassMethodS(conn, ServerClassName, "Populate", mtdSignature);
                    objects = ((CacheIntArgument) (mtdSignature.Arguments[3])).Value;
                    return ((CacheIntReturnValue) (mtdSignature.ReturnValue)).Value;
                }
                finally
                {
                    mtdSignature.Clear();
                }
            }
            finally
            {
                Monitor.Exit(conn);
            }
        }

        public static string PopulateSerial(CacheConnection conn)
        {
            try
            {
                Monitor.Enter(conn);
                conn.GeneratedAssembly = Assembly.GetExecutingAssembly();
                CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try
                {
                    mtdSignature.SetReturnType(conn, 4);
                    RunClassMethodS(conn, ServerClassName, "PopulateSerial", mtdSignature);
                    return ((CacheStringReturnValue) (mtdSignature.ReturnValue)).Value;
                }
                finally
                {
                    mtdSignature.Clear();
                }
            }
            finally
            {
                Monitor.Exit(conn);
            }
        }

        public static CacheCommand Extent(CacheConnection conn)
        {
            CacheCommand cmd = new CacheCommand("{ call SQLUser.Child_Extent}", conn);
            return cmd;
        }

        public static CacheCommand RetrieveAllChildren(CacheConnection conn)
        {
            CacheCommand cmd = new CacheCommand("{ call SQLUser.Child_RetrieveAllChildren(?)}", conn);
            return cmd;
        }

        public static CacheCommand RetrieveAll(CacheConnection conn)
        {
            CacheCommand cmd = new CacheCommand("{ call SQLUser.Child_RetrieveAll}", conn);
            return cmd;
        }
    }
}

namespace nida.model
{
  
    public class Parent : CachePersistent
    {
        public new const string ServerClassName = "User.Parent";

        static Parent()
        {
            CacheConnection.AddClientTypeDescr("User.Parent", typeof (Parent));
        }

        public Parent()
        {
        }

        public Parent(CacheConnection conn)
        {
            try
            {
                Monitor.Enter(conn);
                Init(conn, ServerClassName);
            }
            finally
            {
                Monitor.Exit(conn);
            }
        }

        public virtual CacheDate LastLogin
        {
            get
            {
                try
                {
                    Monitor.Enter(conn);
                    AssertIsConnected();
                    conn.GeneratedAssembly = Assembly.GetExecutingAssembly();
                    CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                    try
                    {
                        mtdSignature.SetReturnType(conn, 7);
                        GetPropertyS("LastLogin", 2, 0, mtdSignature);
                        return ((CacheDateReturnValue) (mtdSignature.ReturnValue)).Value;
                    }
                    finally
                    {
                        mtdSignature.Clear();
                    }
                }
                finally
                {
                    Monitor.Exit(conn);
                }
            }
            set
            {
                try
                {
                    Monitor.Enter(conn);
                    AssertIsConnected();
                    conn.GeneratedAssembly = Assembly.GetExecutingAssembly();
                    CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                    try
                    {
                        mtdSignature.Add(value, conn, false);
                        SetPropertyS("LastLogin", mtdSignature, 2, 0, 2);
                    }
                    finally
                    {
                        mtdSignature.Clear();
                    }
                }
                finally
                {
                    Monitor.Exit(conn);
                }
            }
        }

        public virtual CacheRelationshipObject MyChildren
        {
            get
            {
                try
                {
                    Monitor.Enter(conn);
                    AssertIsConnected();
                    conn.GeneratedAssembly = Assembly.GetExecutingAssembly();
                    CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                    try
                    {
                        mtdSignature.SetReturnType(conn, 0);
                        GetPropertyS("MyChildren", 4, 0, mtdSignature);
                        return ((CacheRelationshipObject) (((CacheObjReturnValue) (mtdSignature.ReturnValue)).Value));
                    }
                    finally
                    {
                        mtdSignature.Clear();
                    }
                }
                finally
                {
                    Monitor.Exit(conn);
                }
            }
            set
            {
                try
                {
                    Monitor.Enter(conn);
                    AssertIsConnected();
                    conn.GeneratedAssembly = Assembly.GetExecutingAssembly();
                    CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                    try
                    {
                        mtdSignature.Add(value, conn, false);
                        SetPropertyS("MyChildren", mtdSignature, 4, 0, 3);
                    }
                    finally
                    {
                        mtdSignature.Clear();
                    }
                }
                finally
                {
                    Monitor.Exit(conn);
                }
            }
        }

        public virtual string Name
        {
            get
            {
                try
                {
                    Monitor.Enter(conn);
                    AssertIsConnected();
                    conn.GeneratedAssembly = Assembly.GetExecutingAssembly();
                    CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                    try
                    {
                        mtdSignature.SetReturnType(conn, 4);
                        GetPropertyS("Name", 5, 0, mtdSignature);
                        return ((CacheStringReturnValue) (mtdSignature.ReturnValue)).Value;
                    }
                    finally
                    {
                        mtdSignature.Clear();
                    }
                }
                finally
                {
                    Monitor.Exit(conn);
                }
            }
            set
            {
                try
                {
                    Monitor.Enter(conn);
                    AssertIsConnected();
                    conn.GeneratedAssembly = Assembly.GetExecutingAssembly();
                    CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                    try
                    {
                        mtdSignature.Add(value, conn, false);
                        SetPropertyS("Name", mtdSignature, 5, 0, 5);
                    }
                    finally
                    {
                        mtdSignature.Clear();
                    }
                }
                finally
                {
                    Monitor.Exit(conn);
                }
            }
        }

        public virtual Nullable<long> ParentId
        {
            get
            {
                try
                {
                    Monitor.Enter(conn);
                    AssertIsConnected();
                    conn.GeneratedAssembly = Assembly.GetExecutingAssembly();
                    CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                    try
                    {
                        mtdSignature.SetReturnType(conn, 1);
                        GetPropertyS("ParentId", 6, 0, mtdSignature);
                        return ((CacheIntReturnValue) (mtdSignature.ReturnValue)).Value;
                    }
                    finally
                    {
                        mtdSignature.Clear();
                    }
                }
                finally
                {
                    Monitor.Exit(conn);
                }
            }
            set
            {
                try
                {
                    Monitor.Enter(conn);
                    AssertIsConnected();
                    conn.GeneratedAssembly = Assembly.GetExecutingAssembly();
                    CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                    try
                    {
                        mtdSignature.Add(value, conn, false);
                        SetPropertyS("ParentId", mtdSignature, 6, 0, 6);
                    }
                    finally
                    {
                        mtdSignature.Clear();
                    }
                }
                finally
                {
                    Monitor.Exit(conn);
                }
            }
        }

        public static Parent Open(CacheConnection conn, byte[] id, int concurrency, out CacheStatus status)
        {
            try
            {
                Monitor.Enter(conn);
                conn.GeneratedAssembly = Assembly.GetExecutingAssembly();
                return ((Parent) (conn.OpenProxyObj(ServerClassName, id, concurrency, out status)));
            }
            finally
            {
                Monitor.Exit(conn);
            }
        }

        public static Parent Open(CacheConnection conn, byte[] id, out CacheStatus status)
        {
            try
            {
                Monitor.Enter(conn);
                conn.GeneratedAssembly = Assembly.GetExecutingAssembly();
                return ((Parent) (conn.OpenProxyObj(ServerClassName, id, out status)));
            }
            finally
            {
                Monitor.Exit(conn);
            }
        }

        public static Parent Open(CacheConnection conn, byte[] id)
        {
            try
            {
                Monitor.Enter(conn);
                conn.GeneratedAssembly = Assembly.GetExecutingAssembly();
                return ((Parent) (conn.OpenProxyObj(ServerClassName, id)));
            }
            finally
            {
                Monitor.Exit(conn);
            }
        }

        public static Parent Open(CacheConnection conn, byte[] id, int concurrency, int timeout, out CacheStatus status)
        {
            try
            {
                Monitor.Enter(conn);
                conn.GeneratedAssembly = Assembly.GetExecutingAssembly();
                return ((Parent) (conn.OpenProxyObj(ServerClassName, id, concurrency, timeout, out status)));
            }
            finally
            {
                Monitor.Exit(conn);
            }
        }

        public static Parent OpenId(CacheConnection conn, string id, int concurrency, out CacheStatus status)
        {
            try
            {
                Monitor.Enter(conn);
                conn.GeneratedAssembly = Assembly.GetExecutingAssembly();
                return ((Parent) (conn.OpenProxyObj(ServerClassName, id, concurrency, out status)));
            }
            finally
            {
                Monitor.Exit(conn);
            }
        }

        public static Parent OpenId(CacheConnection conn, string id, out CacheStatus status)
        {
            try
            {
                Monitor.Enter(conn);
                conn.GeneratedAssembly = Assembly.GetExecutingAssembly();
                return ((Parent) (conn.OpenProxyObj(ServerClassName, id, out status)));
            }
            finally
            {
                Monitor.Exit(conn);
            }
        }

        public static Parent OpenId(CacheConnection conn, string id)
        {
            try
            {
                Monitor.Enter(conn);
                conn.GeneratedAssembly = Assembly.GetExecutingAssembly();
                return ((Parent) (conn.OpenProxyObj(ServerClassName, id)));
            }
            finally
            {
                Monitor.Exit(conn);
            }
        }

        public static Parent OpenId(CacheConnection conn, string id, int concurrency, int timeout,
                                    out CacheStatus status)
        {
            try
            {
                Monitor.Enter(conn);
                conn.GeneratedAssembly = Assembly.GetExecutingAssembly();
                return ((Parent) (conn.OpenProxyObj(ServerClassName, id, concurrency, timeout, out status)));
            }
            finally
            {
                Monitor.Exit(conn);
            }
        }

        public static Nullable<bool> ExistsId(CacheConnection conn, string id)
        {
            return ExistsIdInternal(conn, ServerClassName, id);
        }

        public static CacheStatus DeleteId(CacheConnection conn, string id)
        {
            return DeleteIdInternal(conn, ServerClassName, id);
        }

        public static CacheStatus KillExtent(CacheConnection conn)
        {
            return KillExtentInternal(conn, ServerClassName);
        }

        public static Nullable<bool> IDKEYCheck(CacheConnection conn, string K1)
        {
            try
            {
                Monitor.Enter(conn);
                conn.GeneratedAssembly = Assembly.GetExecutingAssembly();
                CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try
                {
                    mtdSignature.SetReturnType(conn, 9);
                    mtdSignature.Add(K1, conn, false);
                    RunClassMethodS(conn, ServerClassName, "IDKEYCheck", mtdSignature);
                    return ((CacheBooleanReturnValue) (mtdSignature.ReturnValue)).Value;
                }
                finally
                {
                    mtdSignature.Clear();
                }
            }
            finally
            {
                Monitor.Exit(conn);
            }
        }

        public static Nullable<bool> IDKEYCheck(CacheConnection conn, string K1, Nullable<long> lockonly)
        {
            try
            {
                Monitor.Enter(conn);
                conn.GeneratedAssembly = Assembly.GetExecutingAssembly();
                CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try
                {
                    mtdSignature.SetReturnType(conn, 9);
                    mtdSignature.Add(K1, conn, false);
                    mtdSignature.Add(lockonly, conn, false);
                    RunClassMethodS(conn, ServerClassName, "IDKEYCheck", mtdSignature);
                    return ((CacheBooleanReturnValue) (mtdSignature.ReturnValue)).Value;
                }
                finally
                {
                    mtdSignature.Clear();
                }
            }
            finally
            {
                Monitor.Exit(conn);
            }
        }

        public static CacheStatus IDKEYDelete(CacheConnection conn, string K1)
        {
            try
            {
                Monitor.Enter(conn);
                conn.GeneratedAssembly = Assembly.GetExecutingAssembly();
                CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try
                {
                    mtdSignature.SetReturnType(conn, 5);
                    mtdSignature.Add(K1, conn, false);
                    RunClassMethodS(conn, ServerClassName, "IDKEYDelete", mtdSignature);
                    return ((CacheStatusReturnValue) (mtdSignature.ReturnValue)).Value;
                }
                finally
                {
                    mtdSignature.Clear();
                }
            }
            finally
            {
                Monitor.Exit(conn);
            }
        }

        public static CacheStatus IDKEYDelete(CacheConnection conn, string K1, Nullable<long> concurrency)
        {
            try
            {
                Monitor.Enter(conn);
                conn.GeneratedAssembly = Assembly.GetExecutingAssembly();
                CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try
                {
                    mtdSignature.SetReturnType(conn, 5);
                    mtdSignature.Add(K1, conn, false);
                    mtdSignature.Add(concurrency, conn, false);
                    RunClassMethodS(conn, ServerClassName, "IDKEYDelete", mtdSignature);
                    return ((CacheStatusReturnValue) (mtdSignature.ReturnValue)).Value;
                }
                finally
                {
                    mtdSignature.Clear();
                }
            }
            finally
            {
                Monitor.Exit(conn);
            }
        }

        public static Nullable<bool> IDKEYExists(CacheConnection conn, string K1)
        {
            try
            {
                Monitor.Enter(conn);
                conn.GeneratedAssembly = Assembly.GetExecutingAssembly();
                CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try
                {
                    mtdSignature.SetReturnType(conn, 9);
                    mtdSignature.Add(K1, conn, false);
                    RunClassMethodS(conn, ServerClassName, "IDKEYExists", mtdSignature);
                    return ((CacheBooleanReturnValue) (mtdSignature.ReturnValue)).Value;
                }
                finally
                {
                    mtdSignature.Clear();
                }
            }
            finally
            {
                Monitor.Exit(conn);
            }
        }

        public static Nullable<bool> IDKEYExists(CacheConnection conn, string K1, ref string id)
        {
            try
            {
                Monitor.Enter(conn);
                conn.GeneratedAssembly = Assembly.GetExecutingAssembly();
                CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try
                {
                    mtdSignature.SetReturnType(conn, 9);
                    mtdSignature.Add(K1, conn, false);
                    mtdSignature.Add(id, conn, true);
                    RunClassMethodS(conn, ServerClassName, "IDKEYExists", mtdSignature);
                    id = ((CacheStringArgument) (mtdSignature.Arguments[1])).Value;
                    return ((CacheBooleanReturnValue) (mtdSignature.ReturnValue)).Value;
                }
                finally
                {
                    mtdSignature.Clear();
                }
            }
            finally
            {
                Monitor.Exit(conn);
            }
        }

        public static CacheObject IDKEYOpen(CacheConnection conn, string K1)
        {
            try
            {
                Monitor.Enter(conn);
                conn.GeneratedAssembly = Assembly.GetExecutingAssembly();
                CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try
                {
                    mtdSignature.SetReturnType(conn, 0);
                    mtdSignature.Add(K1, conn, false);
                    RunClassMethodS(conn, ServerClassName, "IDKEYOpen", mtdSignature);
                    return ((CacheObject) (((CacheObjReturnValue) (mtdSignature.ReturnValue)).Value));
                }
                finally
                {
                    mtdSignature.Clear();
                }
            }
            finally
            {
                Monitor.Exit(conn);
            }
        }

        public static CacheObject IDKEYOpen(CacheConnection conn, string K1, Nullable<long> concurrency)
        {
            try
            {
                Monitor.Enter(conn);
                conn.GeneratedAssembly = Assembly.GetExecutingAssembly();
                CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try
                {
                    mtdSignature.SetReturnType(conn, 0);
                    mtdSignature.Add(K1, conn, false);
                    mtdSignature.Add(concurrency, conn, false);
                    RunClassMethodS(conn, ServerClassName, "IDKEYOpen", mtdSignature);
                    return ((CacheObject) (((CacheObjReturnValue) (mtdSignature.ReturnValue)).Value));
                }
                finally
                {
                    mtdSignature.Clear();
                }
            }
            finally
            {
                Monitor.Exit(conn);
            }
        }

        public static CacheObject IDKEYOpen(CacheConnection conn, string K1, Nullable<long> concurrency,
                                            ref CacheStatus sc)
        {
            try
            {
                Monitor.Enter(conn);
                conn.GeneratedAssembly = Assembly.GetExecutingAssembly();
                CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try
                {
                    mtdSignature.SetReturnType(conn, 0);
                    mtdSignature.Add(K1, conn, false);
                    mtdSignature.Add(concurrency, conn, false);
                    mtdSignature.Add(sc, conn, true);
                    RunClassMethodS(conn, ServerClassName, "IDKEYOpen", mtdSignature);
                    sc = ((CacheStatusArgument) (mtdSignature.Arguments[2])).Value;
                    return ((CacheObject) (((CacheObjReturnValue) (mtdSignature.ReturnValue)).Value));
                }
                finally
                {
                    mtdSignature.Clear();
                }
            }
            finally
            {
                Monitor.Exit(conn);
            }
        }

        public virtual string MyChildrenGetObjectId()
        {
            try
            {
                Monitor.Enter(conn);
                AssertIsConnected();
                conn.GeneratedAssembly = Assembly.GetExecutingAssembly();
                CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try
                {
                    mtdSignature.SetReturnType(conn, 4);
                    RunMethodS("MyChildrenGetObjectId", mtdSignature);
                    return ((CacheStringReturnValue) (mtdSignature.ReturnValue)).Value;
                }
                finally
                {
                    mtdSignature.Clear();
                }
            }
            finally
            {
                Monitor.Exit(conn);
            }
        }

        public virtual string MyChildrenGetObjectId(Nullable<long> force)
        {
            try
            {
                Monitor.Enter(conn);
                AssertIsConnected();
                conn.GeneratedAssembly = Assembly.GetExecutingAssembly();
                CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try
                {
                    mtdSignature.SetReturnType(conn, 4);
                    mtdSignature.Add(force, conn, false);
                    RunMethodS("MyChildrenGetObjectId", mtdSignature);
                    return ((CacheStringReturnValue) (mtdSignature.ReturnValue)).Value;
                }
                finally
                {
                    mtdSignature.Clear();
                }
            }
            finally
            {
                Monitor.Exit(conn);
            }
        }

        public virtual CacheStatus OnPopulate()
        {
            try
            {
                Monitor.Enter(conn);
                AssertIsConnected();
                conn.GeneratedAssembly = Assembly.GetExecutingAssembly();
                CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try
                {
                    mtdSignature.SetReturnType(conn, 5);
                    RunMethodS("OnPopulate", mtdSignature);
                    return ((CacheStatusReturnValue) (mtdSignature.ReturnValue)).Value;
                }
                finally
                {
                    mtdSignature.Clear();
                }
            }
            finally
            {
                Monitor.Exit(conn);
            }
        }

        public static Nullable<bool> ParentIdIndexCheck(CacheConnection conn, Nullable<long> K1)
        {
            try
            {
                Monitor.Enter(conn);
                conn.GeneratedAssembly = Assembly.GetExecutingAssembly();
                CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try
                {
                    mtdSignature.SetReturnType(conn, 9);
                    mtdSignature.Add(K1, conn, false);
                    RunClassMethodS(conn, ServerClassName, "ParentIdIndexCheck", mtdSignature);
                    return ((CacheBooleanReturnValue) (mtdSignature.ReturnValue)).Value;
                }
                finally
                {
                    mtdSignature.Clear();
                }
            }
            finally
            {
                Monitor.Exit(conn);
            }
        }

        public static Nullable<bool> ParentIdIndexCheck(CacheConnection conn, Nullable<long> K1, Nullable<long> lockonly)
        {
            try
            {
                Monitor.Enter(conn);
                conn.GeneratedAssembly = Assembly.GetExecutingAssembly();
                CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try
                {
                    mtdSignature.SetReturnType(conn, 9);
                    mtdSignature.Add(K1, conn, false);
                    mtdSignature.Add(lockonly, conn, false);
                    RunClassMethodS(conn, ServerClassName, "ParentIdIndexCheck", mtdSignature);
                    return ((CacheBooleanReturnValue) (mtdSignature.ReturnValue)).Value;
                }
                finally
                {
                    mtdSignature.Clear();
                }
            }
            finally
            {
                Monitor.Exit(conn);
            }
        }

        public static CacheStatus ParentIdIndexDelete(CacheConnection conn, Nullable<long> K1)
        {
            try
            {
                Monitor.Enter(conn);
                conn.GeneratedAssembly = Assembly.GetExecutingAssembly();
                CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try
                {
                    mtdSignature.SetReturnType(conn, 5);
                    mtdSignature.Add(K1, conn, false);
                    RunClassMethodS(conn, ServerClassName, "ParentIdIndexDelete", mtdSignature);
                    return ((CacheStatusReturnValue) (mtdSignature.ReturnValue)).Value;
                }
                finally
                {
                    mtdSignature.Clear();
                }
            }
            finally
            {
                Monitor.Exit(conn);
            }
        }

        public static CacheStatus ParentIdIndexDelete(CacheConnection conn, Nullable<long> K1,
                                                      Nullable<long> concurrency)
        {
            try
            {
                Monitor.Enter(conn);
                conn.GeneratedAssembly = Assembly.GetExecutingAssembly();
                CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try
                {
                    mtdSignature.SetReturnType(conn, 5);
                    mtdSignature.Add(K1, conn, false);
                    mtdSignature.Add(concurrency, conn, false);
                    RunClassMethodS(conn, ServerClassName, "ParentIdIndexDelete", mtdSignature);
                    return ((CacheStatusReturnValue) (mtdSignature.ReturnValue)).Value;
                }
                finally
                {
                    mtdSignature.Clear();
                }
            }
            finally
            {
                Monitor.Exit(conn);
            }
        }

        public static Nullable<bool> ParentIdIndexExists(CacheConnection conn, Nullable<long> K1)
        {
            try
            {
                Monitor.Enter(conn);
                conn.GeneratedAssembly = Assembly.GetExecutingAssembly();
                CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try
                {
                    mtdSignature.SetReturnType(conn, 9);
                    mtdSignature.Add(K1, conn, false);
                    RunClassMethodS(conn, ServerClassName, "ParentIdIndexExists", mtdSignature);
                    return ((CacheBooleanReturnValue) (mtdSignature.ReturnValue)).Value;
                }
                finally
                {
                    mtdSignature.Clear();
                }
            }
            finally
            {
                Monitor.Exit(conn);
            }
        }

        public static Nullable<bool> ParentIdIndexExists(CacheConnection conn, Nullable<long> K1, ref string id)
        {
            try
            {
                Monitor.Enter(conn);
                conn.GeneratedAssembly = Assembly.GetExecutingAssembly();
                CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try
                {
                    mtdSignature.SetReturnType(conn, 9);
                    mtdSignature.Add(K1, conn, false);
                    mtdSignature.Add(id, conn, true);
                    RunClassMethodS(conn, ServerClassName, "ParentIdIndexExists", mtdSignature);
                    id = ((CacheStringArgument) (mtdSignature.Arguments[1])).Value;
                    return ((CacheBooleanReturnValue) (mtdSignature.ReturnValue)).Value;
                }
                finally
                {
                    mtdSignature.Clear();
                }
            }
            finally
            {
                Monitor.Exit(conn);
            }
        }

        public static CacheObject ParentIdIndexOpen(CacheConnection conn, Nullable<long> K1)
        {
            try
            {
                Monitor.Enter(conn);
                conn.GeneratedAssembly = Assembly.GetExecutingAssembly();
                CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try
                {
                    mtdSignature.SetReturnType(conn, 0);
                    mtdSignature.Add(K1, conn, false);
                    RunClassMethodS(conn, ServerClassName, "ParentIdIndexOpen", mtdSignature);
                    return ((CacheObject) (((CacheObjReturnValue) (mtdSignature.ReturnValue)).Value));
                }
                finally
                {
                    mtdSignature.Clear();
                }
            }
            finally
            {
                Monitor.Exit(conn);
            }
        }

        public static CacheObject ParentIdIndexOpen(CacheConnection conn, Nullable<long> K1, Nullable<long> concurrency)
        {
            try
            {
                Monitor.Enter(conn);
                conn.GeneratedAssembly = Assembly.GetExecutingAssembly();
                CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try
                {
                    mtdSignature.SetReturnType(conn, 0);
                    mtdSignature.Add(K1, conn, false);
                    mtdSignature.Add(concurrency, conn, false);
                    RunClassMethodS(conn, ServerClassName, "ParentIdIndexOpen", mtdSignature);
                    return ((CacheObject) (((CacheObjReturnValue) (mtdSignature.ReturnValue)).Value));
                }
                finally
                {
                    mtdSignature.Clear();
                }
            }
            finally
            {
                Monitor.Exit(conn);
            }
        }

        public static CacheObject ParentIdIndexOpen(CacheConnection conn, Nullable<long> K1, Nullable<long> concurrency,
                                                    ref CacheStatus sc)
        {
            try
            {
                Monitor.Enter(conn);
                conn.GeneratedAssembly = Assembly.GetExecutingAssembly();
                CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try
                {
                    mtdSignature.SetReturnType(conn, 0);
                    mtdSignature.Add(K1, conn, false);
                    mtdSignature.Add(concurrency, conn, false);
                    mtdSignature.Add(sc, conn, true);
                    RunClassMethodS(conn, ServerClassName, "ParentIdIndexOpen", mtdSignature);
                    sc = ((CacheStatusArgument) (mtdSignature.Arguments[2])).Value;
                    return ((CacheObject) (((CacheObjReturnValue) (mtdSignature.ReturnValue)).Value));
                }
                finally
                {
                    mtdSignature.Clear();
                }
            }
            finally
            {
                Monitor.Exit(conn);
            }
        }

        public static Nullable<long> Populate(CacheConnection conn)
        {
            try
            {
                Monitor.Enter(conn);
                conn.GeneratedAssembly = Assembly.GetExecutingAssembly();
                CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try
                {
                    mtdSignature.SetReturnType(conn, 1);
                    RunClassMethodS(conn, ServerClassName, "Populate", mtdSignature);
                    return ((CacheIntReturnValue) (mtdSignature.ReturnValue)).Value;
                }
                finally
                {
                    mtdSignature.Clear();
                }
            }
            finally
            {
                Monitor.Exit(conn);
            }
        }

        public static Nullable<long> Populate(CacheConnection conn, Nullable<long> count)
        {
            try
            {
                Monitor.Enter(conn);
                conn.GeneratedAssembly = Assembly.GetExecutingAssembly();
                CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try
                {
                    mtdSignature.SetReturnType(conn, 1);
                    mtdSignature.Add(count, conn, false);
                    RunClassMethodS(conn, ServerClassName, "Populate", mtdSignature);
                    return ((CacheIntReturnValue) (mtdSignature.ReturnValue)).Value;
                }
                finally
                {
                    mtdSignature.Clear();
                }
            }
            finally
            {
                Monitor.Exit(conn);
            }
        }

        public static Nullable<long> Populate(CacheConnection conn, Nullable<long> count, Nullable<long> verbose)
        {
            try
            {
                Monitor.Enter(conn);
                conn.GeneratedAssembly = Assembly.GetExecutingAssembly();
                CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try
                {
                    mtdSignature.SetReturnType(conn, 1);
                    mtdSignature.Add(count, conn, false);
                    mtdSignature.Add(verbose, conn, false);
                    RunClassMethodS(conn, ServerClassName, "Populate", mtdSignature);
                    return ((CacheIntReturnValue) (mtdSignature.ReturnValue)).Value;
                }
                finally
                {
                    mtdSignature.Clear();
                }
            }
            finally
            {
                Monitor.Exit(conn);
            }
        }

        public static Nullable<long> Populate(CacheConnection conn, Nullable<long> count, Nullable<long> verbose,
                                              Nullable<long> DeferIndices)
        {
            try
            {
                Monitor.Enter(conn);
                conn.GeneratedAssembly = Assembly.GetExecutingAssembly();
                CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try
                {
                    mtdSignature.SetReturnType(conn, 1);
                    mtdSignature.Add(count, conn, false);
                    mtdSignature.Add(verbose, conn, false);
                    mtdSignature.Add(DeferIndices, conn, false);
                    RunClassMethodS(conn, ServerClassName, "Populate", mtdSignature);
                    return ((CacheIntReturnValue) (mtdSignature.ReturnValue)).Value;
                }
                finally
                {
                    mtdSignature.Clear();
                }
            }
            finally
            {
                Monitor.Exit(conn);
            }
        }

        public static Nullable<long> Populate(CacheConnection conn, Nullable<long> count, Nullable<long> verbose,
                                              Nullable<long> DeferIndices, ref Nullable<long> objects)
        {
            try
            {
                Monitor.Enter(conn);
                conn.GeneratedAssembly = Assembly.GetExecutingAssembly();
                CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try
                {
                    mtdSignature.SetReturnType(conn, 1);
                    mtdSignature.Add(count, conn, false);
                    mtdSignature.Add(verbose, conn, false);
                    mtdSignature.Add(DeferIndices, conn, false);
                    mtdSignature.Add(objects, conn, true);
                    RunClassMethodS(conn, ServerClassName, "Populate", mtdSignature);
                    objects = ((CacheIntArgument) (mtdSignature.Arguments[3])).Value;
                    return ((CacheIntReturnValue) (mtdSignature.ReturnValue)).Value;
                }
                finally
                {
                    mtdSignature.Clear();
                }
            }
            finally
            {
                Monitor.Exit(conn);
            }
        }

        public static Nullable<long> Populate(CacheConnection conn, Nullable<long> count, Nullable<long> verbose,
                                              Nullable<long> DeferIndices, ref Nullable<long> objects,
                                              Nullable<long> tune)
        {
            try
            {
                Monitor.Enter(conn);
                conn.GeneratedAssembly = Assembly.GetExecutingAssembly();
                CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try
                {
                    mtdSignature.SetReturnType(conn, 1);
                    mtdSignature.Add(count, conn, false);
                    mtdSignature.Add(verbose, conn, false);
                    mtdSignature.Add(DeferIndices, conn, false);
                    mtdSignature.Add(objects, conn, true);
                    mtdSignature.Add(tune, conn, false);
                    RunClassMethodS(conn, ServerClassName, "Populate", mtdSignature);
                    objects = ((CacheIntArgument) (mtdSignature.Arguments[3])).Value;
                    return ((CacheIntReturnValue) (mtdSignature.ReturnValue)).Value;
                }
                finally
                {
                    mtdSignature.Clear();
                }
            }
            finally
            {
                Monitor.Exit(conn);
            }
        }

        public static string PopulateSerial(CacheConnection conn)
        {
            try
            {
                Monitor.Enter(conn);
                conn.GeneratedAssembly = Assembly.GetExecutingAssembly();
                CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try
                {
                    mtdSignature.SetReturnType(conn, 4);
                    RunClassMethodS(conn, ServerClassName, "PopulateSerial", mtdSignature);
                    return ((CacheStringReturnValue) (mtdSignature.ReturnValue)).Value;
                }
                finally
                {
                    mtdSignature.Clear();
                }
            }
            finally
            {
                Monitor.Exit(conn);
            }
        }

        public static CacheCommand Extent(CacheConnection conn)
        {
            CacheCommand cmd = new CacheCommand("{ call SQLUser.Parent_Extent}", conn);
            return cmd;
        }

        public static CacheCommand RetrieveAll(CacheConnection conn)
        {
            CacheCommand cmd = new CacheCommand("{ call SQLUser.Parent_RetrieveAll}", conn);
            return cmd;
        }
    }
}